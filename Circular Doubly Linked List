Circular Doubly Linked List:

#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next=NULL, *prev=NULL;
};

Node* head = NULL;
Node* tail = NULL;
int count = 0;

void insert_begin();
void insert_end();
void insert_pos();
void delete_begin();
void delete_end();
void delete_pos();
void display();

int main() {
    int choice;
    cout << "1. Insert at Beginning\n2. Insert at End\n3. Insert at Position\n";
    cout << "4. Delete from Beginning\n5. Delete from End\n6. Delete from Position\n7. Display\n8. Exit\n";
    while (true) {
        cout << "\nEnter your choice: ";
        cin >> choice;
        switch (choice) {
            case 1: insert_begin(); break;
            case 2: insert_end(); break;
            case 3: insert_pos(); break;
            case 4: delete_begin(); break;
            case 5: delete_end(); break;
            case 6: delete_pos(); break;
            case 7: display(); break;
            default: cout << "Program Terminated!\n"; 
					 return 0;
        }
    }
}

// Insert at the beginning
void insert_begin() {
    Node* newNode = new Node();
    cout << "Enter the element: ";
    cin >> newNode->data;
    newNode->next = newNode->prev = NULL;
    if (head==NULL)	 
		head = tail = newNode;
	else
	{
		newNode->next=head;
		head->prev=newNode;
    	head = newNode; //head=head->prev;
	}
	tail->next=head;
	head->prev=tail;
	count++;
    display();
}

// Insert at the end
void insert_end() {
    Node* newNode = new Node();
    cout << "Enter the element: ";
    cin >> newNode->data;
    newNode->next = NULL;
    if (head==NULL)	 
		head = tail = newNode;
    else {
        tail->next = newNode;
        newNode->prev=tail;
        tail = newNode;
    }
    tail->next=head;
	head->prev=tail;
    count++;
    display();
}

void insert_pos() {
    int position, value;
    cout << "Enter the position: ";
    cin >> position;
    if (position < 1 || position > count + 1) {
        cout << "Invalid position!\n";
        return;
    }
    if (position == 1)
        insert_begin();
    else if (position == count + 1)
        insert_end();
    else {
        Node* newNode = new Node();
		cout << "Enter the element: ";
        cin >> newNode->data;
        Node* temp = head;
        for (int i = 1; i < position - 1; i++)
            temp = temp->next;
        newNode->next = temp->next;
        newNode->prev=temp;
		temp->next=newNode;
		newNode->next->prev=newNode;
        count++;
    }
    display();
}

// Delete from the beginning
void delete_begin() {
    if (!head)
	    cout << "The list is empty\n";
    else
    {
    	Node* delNode = head;
    	if(head==tail) 
			head=tail=NULL;
    	else
		{
			head = head->next;
    		head->prev=NULL;
		}
    	delete delNode;
    	count--;
	}
	tail->next=head;
	head->prev=tail;
    display();
}

// Delete from the end
void delete_end() {
    if (!head)
        cout << "The list is empty\n";
    else
    {
    	Node* delNode = tail;
    	if (head == tail)
        	head = tail = NULL;
    	else 
		{
        	tail=tail->prev;
			tail->next=NULL;
			delNode->prev=NULL;
    	}
    	delete delNode;
    	tail->next=head;
		head->prev=tail;
    	count--;
	}
    display();
}

// Delete from a specific position
void delete_pos() {
    int position;
    cout << "Enter the position: ";
    cin >> position;
    if (position < 1 || position > count)
        cout << "Invalid position!\n";
    else if (position == 1)
        delete_begin();
    else if (position == count)
        delete_end();
    else {
        Node* temp = head;
        for (int i = 1; i < position - 1; i++)
            temp = temp->next;
        Node* delNode = temp->next;
        temp->next=delNode->next;
		delNode->next->prev=temp;
		delNode->prev=NULL;
		delNode->next=NULL;
		temp->next = delNode->next;
        delete delNode;
        count--;
    }
    display();
}

// Display the linked list
void display() {
    if (!head) { //if(head==NULL)
        cout << "The list is empty\n";
        return;
    }
    Node* temp = head;
    cout << "The elements are: ";
    for(temp=head;temp!=tail;temp = temp->next)
        cout << temp->data << " -> ";
    cout << temp->data << " -> ";
    cout << "NULL\n";
}
